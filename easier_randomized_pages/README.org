* Introduction 🐇
Here I provide a more gentle (new-user-friendly) approach to program an app with randomized pages, compared to the one provided [[file:../randomized_pages/README.org][here]].

* Design 📘
:LOGBOOK:
CLOCK: [2020-08-27 Thu 14:41]--[2020-08-27 Thu 15:05] =>  0:24
CLOCK: [2020-08-27 Thu 13:26]--[2020-08-27 Thu 14:37] =>  1:11
:END:
Suppose we have the following pages in our ~pages.py~ and we want to randomize their order:
#+begin_src python
class P_1(Page):
    pass

class P_2(Page):
    pass

class P_3(Page):
    pass

page_sequence = [P_1, P_2, P_3]
#+end_src

The original solution was to actually modify ~page_sequence~, which is hard to understand if you don't know Python well.

*What we want to do here is to keep ~page_sequence~ untouched and increase our ~num_rounds~ in ~models.py~ to achieve a randomized result.*

The core idea is that with ~n~ pages, we can have ~n~ rounds so that *each round will randomly display only one page*.

We can have the following table.
| Round/Page | P_1 | P_2 | P_3 |
|------------+-----+-----+-----|
|          1 |   0 |   0 |   1 |
|          2 |   0 |   1 |   0 |
|          3 |   1 |   0 |   0 |
where "1" means the page is displayed in the round and "0" means the page is not displayed in the round.
In the above table, the randomized order of pages is ~P_3~, ~P_2~, ~P_1~.

Let's suppose that we want to randomize the pages on a *Player* level, which means that in the same session, players can face different order of these three pages.

We start in our ~models.py~.
#+begin_src python
# models.py
# other code not included

from random import shuffle

class Constants(BaseConstants):
    name_in_url = 'easier_randomized_pages'
    players_per_group = None
    # set this to the number of pages that are to be randomized
    num_rounds = 3

    # This does not need to be a list,
    # Creating this list should be fairly easy
    page_masks = [
        "001",
        "010",
        "100",
    ]

class Subsession(BaseSubsession):
    def creating_session(self):
        for p in self.get_players():
            # player.page_mask should be the same across all rounds
            # every player will randomly get a page_mask
            if self.round_number == 1:
                page_masks = Constants.page_masks.copy()
                shuffle(page_masks)
                p.page_mask = "".join(page_masks)
            else:
                p.page_mask = p.in_round(1).page_order


            # at the start of each round
            # we get the page mask for the round
            # e.g. in round 2, we get the 010 part in 100010001
            p.page_mask_in_round = p.page_order[
                Constants.num_rounds
                ,* (self.round_number - 1) : Constants.num_rounds
                ,* self.round_number
            ]
class Player(BasePlayer):
    # the page mask for all rounds
    # for a 3-round (3-page) app
    # this would be something like "001100010"
    # this will be the same across all rounds
    page_mask = models.StringField()
    # the page mask for a single round
    # for a 3-round (3-page) app
    # this would be something like "001"
    # this will be different across all rounds
    page_mask_in_round = models.StringField()
#+end_src

Then we modify our ~pages.py~.
#+begin_src python

class ControlPage(Page):
    """
    Use this page class to control the diplay of its subclass.
    """

    def is_displayed(self):
        # for page P_1, we get number 1
        cur_page_num = int(self.__class__.__name__.split('_')[1])

        # say player's page_mask_in_round is "001"
        # then only when cur_page_num == 3 will we get a 1 from 
        # self.player.page_mask_in_round[cur_page_num - 1]
        # Otherwise we only get 0.
        # Adding 1 & (bitwise and) is just me personally want to explicitly
        # return True or False, instead of 1 or 0.
        return 1 & int(
            self.player.page_mask_in_round[cur_page_num - 1]
        )


class P_1(ControlPage):
    pass


class P_2(ControlPage):
    pass


class P_3(ControlPage):
    pass


page_sequence = [P_1, P_2, P_3]
#+end_src

And that's it! :boom:

* Note on data analysis
If you have form fields on many pages, you need to be aware that in this case the app will create many blank ones in every round due to its mechanism.

